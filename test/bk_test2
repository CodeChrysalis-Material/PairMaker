const makePair = require("./MakePair_copy");
const { countPairMember, checkPairs } = require("./utility");
const data10 = require("./testData/testdata_10")(); //10名のリスト
const data13 = require("./testData/testdata_13")(); //13名のリスト
const data15 = require("./testData/testdata_15")(); //15名のリスト

var assert = require("assert");

describe("MakePair", function () {
  describe("test data", () => {
    it("data10 contains 10people", () => {
      assert.equal(data10.length, 10);
    });
    it("data15 contains 15people", () => {
      assert.equal(data15.length, 15);
    });
  });
  describe("paired partner", () => {
    it("10 students hasn't paired with any paticuler partner more than 4 times", () => {
      async function repeatFunc() {
        let resultOf10People = await makePair(10, data10);
        console.log("resultOf10People: ", resultOf10People);
        let result = checkPairs(countPairMember(resultOf10People));
        if (result === true) {
          return resultOf10People;
        } else {
          repeatFunc();
        }
      }
      assert.equal(checkPairs(countPairMember(repeatFunc())), true);

      // assert.equal(checkPairs(countPairMember(makePair(15, data15))), true);
    });

    it("13 students hasn't paired with any paticuler partner more than 4 times", () => {
      async function repeatFunc() {
        let resultOf13People = await makePair(13, data13);
        console.log("resultOf13People: ", resultOf13People);
        let result = checkPairs(countPairMember(resultOf13People));
        if (result === true) {
          return resultOf13People;
        } else {
          repeatFunc();
        }
      }
      assert.equal(checkPairs(countPairMember(repeatFunc())), true);

      // assert.equal(checkPairs(countPairMember(makePair(15, data15))), true);
    });

    it("15 students hasn't paired with any paticuler partner more than 4 times", () => {
      async function repeatFunc() {
        let resultOf15People = await makePair(15, data15);
        console.log("resultOf15People: ", resultOf15People);
        let result = checkPairs(countPairMember(resultOf15People));
        if (result === true) {
          return resultOf15People;
        } else {
          repeatFunc();
        }
      }
      assert.equal(checkPairs(countPairMember(repeatFunc())), true);

      // assert.equal(checkPairs(countPairMember(makePair(15, data15))), true);
    });
  });
});
